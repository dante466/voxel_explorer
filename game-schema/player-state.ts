// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Vec3, Vec3T } from '../game-schema/vec3.js';


export class PlayerState implements flatbuffers.IUnpackableObject<PlayerStateT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PlayerState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlayerState(bb:flatbuffers.ByteBuffer, obj?:PlayerState):PlayerState {
  return (obj || new PlayerState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlayerState(bb:flatbuffers.ByteBuffer, obj?:PlayerState):PlayerState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

position(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vec3()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

vel(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vec3()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

yaw():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

lastAck():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

isFlying():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isGrounded():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startPlayerState(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, positionOffset, 0);
}

static addVel(builder:flatbuffers.Builder, velOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, velOffset, 0);
}

static addYaw(builder:flatbuffers.Builder, yaw:number) {
  builder.addFieldFloat32(3, yaw, 0.0);
}

static addLastAck(builder:flatbuffers.Builder, lastAck:number) {
  builder.addFieldInt32(4, lastAck, 0);
}

static addIsFlying(builder:flatbuffers.Builder, isFlying:boolean) {
  builder.addFieldInt8(5, +isFlying, +false);
}

static addIsGrounded(builder:flatbuffers.Builder, isGrounded:boolean) {
  builder.addFieldInt8(6, +isGrounded, +false);
}

static endPlayerState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // id
  return offset;
}


unpack(): PlayerStateT {
  return new PlayerStateT(
    this.id(),
    (this.position() !== null ? this.position()!.unpack() : null),
    (this.vel() !== null ? this.vel()!.unpack() : null),
    this.yaw(),
    this.lastAck(),
    this.isFlying(),
    this.isGrounded()
  );
}


unpackTo(_o: PlayerStateT): void {
  _o.id = this.id();
  _o.position = (this.position() !== null ? this.position()!.unpack() : null);
  _o.vel = (this.vel() !== null ? this.vel()!.unpack() : null);
  _o.yaw = this.yaw();
  _o.lastAck = this.lastAck();
  _o.isFlying = this.isFlying();
  _o.isGrounded = this.isGrounded();
}
}

export class PlayerStateT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public position: Vec3T|null = null,
  public vel: Vec3T|null = null,
  public yaw: number = 0.0,
  public lastAck: number = 0,
  public isFlying: boolean = false,
  public isGrounded: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const position = (this.position !== null ? this.position!.pack(builder) : 0);
  const vel = (this.vel !== null ? this.vel!.pack(builder) : 0);

  PlayerState.startPlayerState(builder);
  PlayerState.addId(builder, id);
  PlayerState.addPosition(builder, position);
  PlayerState.addVel(builder, vel);
  PlayerState.addYaw(builder, this.yaw);
  PlayerState.addLastAck(builder, this.lastAck);
  PlayerState.addIsFlying(builder, this.isFlying);
  PlayerState.addIsGrounded(builder, this.isGrounded);

  return PlayerState.endPlayerState(builder);
}
}
