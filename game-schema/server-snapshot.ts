// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { PlayerState, PlayerStateT } from '../game-schema/player-state.js';


export class ServerSnapshot implements flatbuffers.IUnpackableObject<ServerSnapshotT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ServerSnapshot {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsServerSnapshot(bb:flatbuffers.ByteBuffer, obj?:ServerSnapshot):ServerSnapshot {
  return (obj || new ServerSnapshot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsServerSnapshot(bb:flatbuffers.ByteBuffer, obj?:ServerSnapshot):ServerSnapshot {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ServerSnapshot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

tick():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

players(index: number, obj?:PlayerState):PlayerState|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new PlayerState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

playersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startServerSnapshot(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTick(builder:flatbuffers.Builder, tick:number) {
  builder.addFieldInt32(0, tick, 0);
}

static addPlayers(builder:flatbuffers.Builder, playersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, playersOffset, 0);
}

static createPlayersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPlayersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endServerSnapshot(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createServerSnapshot(builder:flatbuffers.Builder, tick:number, playersOffset:flatbuffers.Offset):flatbuffers.Offset {
  ServerSnapshot.startServerSnapshot(builder);
  ServerSnapshot.addTick(builder, tick);
  ServerSnapshot.addPlayers(builder, playersOffset);
  return ServerSnapshot.endServerSnapshot(builder);
}

unpack(): ServerSnapshotT {
  return new ServerSnapshotT(
    this.tick(),
    this.bb!.createObjList<PlayerState, PlayerStateT>(this.players.bind(this), this.playersLength())
  );
}


unpackTo(_o: ServerSnapshotT): void {
  _o.tick = this.tick();
  _o.players = this.bb!.createObjList<PlayerState, PlayerStateT>(this.players.bind(this), this.playersLength());
}
}

export class ServerSnapshotT implements flatbuffers.IGeneratedObject {
constructor(
  public tick: number = 0,
  public players: (PlayerStateT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const players = ServerSnapshot.createPlayersVector(builder, builder.createObjectOffsetList(this.players));

  return ServerSnapshot.createServerSnapshot(builder,
    this.tick,
    players
  );
}
}
