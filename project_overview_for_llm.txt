Voxel Explorer Project Overview for LLMs (Last Updated: Current Date - Manual Review)

This document provides a detailed breakdown of the Voxel Explorer game project, based on its codebase, technical specification, and recent refactoring efforts.

0. Vision & Scope
A hyper-performant, desktop-web, top-down voxel game with procedurally generated terrain. Targets 60 FPS on mid-range hardware with server-side authoritative physics at 30 Hz. MVP focuses on exploration, mining, and building.

1. Core Technologies
   - Rendering: Three.js (WebGL2)
   - Physics: Rapier3D (WASM, server-side)
   - Networking: Raw WebSockets (Client: native WebSocket, Server: 'ws' library)
   - Language: TypeScript
   - ECS: 'bitecs' library
   - Bundling/Dev: Vite

2. Project Structure (Primary Directories in `src/`)

   - `main.tsx`: Main client-side entry point. Initializes Three.js, ECS world and systems, game loop, managers, debug UI. Manages the main animation loop calling ECS systems.
   - `ecs/`: Entity Component System.
     - `world.ts`: `bitecs` world creation, `Transform` component definition (position, rotation, scale).
     - `types.ts`: Shared ECS types, e.g., `CameraMode`.
     - `components/`:
       - `CameraTarget.ts`: Defines `CameraTarget` component (mode, zoom, pitch, yaw) for entities the camera should focus on or be controlled by.
     - `systems/`:
       - `transformSystem.ts`: Syncs ECS `Transform.position` to Three.js `Object3D.position` (and potentially rotation/scale in future). Manages a map of entity IDs to `Object3D` instances.
       - `CameraSystem.ts`: Initializes and manages the main `THREE.PerspectiveCamera` and a pivot `Object3D`. Updates camera position/rotation based on `CameraTarget` (FPS logic implemented for C4; TPS and lerping pending C5-C7).
       - `inputLookSystem.ts`: Listens for `mousemove` events when pointer is locked. Updates `CameraTarget.yaw` and `CameraTarget.pitch` for FPS mode (TPS mode updates pending C5).
       - `PlayerMovementSystem.ts`: Listens for keyboard inputs (WASD, Space, Shift, F, Arrows). Updates the player entity's `Transform.position` based on these inputs and `CameraTarget.yaw`. Includes flying/ground mode toggle and basic gravity/jump for ground mode. Prevents default browser key actions.
   - `world/`: Core voxel world logic.
     - `Chunk.ts`: Defines `CHUNK_SIZE`, `LOD_CHUNK_SIZE`. `Chunk` class stores voxel data (`Uint8Array`), manages LOD-specific dimensions, provides RLE compression/decompression, and heightmap access.
     - `noiseWorker.ts`: Web worker using `fast-simplex-noise` for deterministic procedural terrain generation.
     - `NoiseManager.ts`: Manages `noiseWorker.ts`.
     - `mesherWorker.ts`: Web worker for generating chunk meshes (block-by-block).
     - `MesherManager.ts`: Manages `mesherWorker.ts`.
     - `ChunkManager.ts`: Orchestrates chunk loading/unloading, LOD, and meshing. Provides `getHeightAtPosition` which is crucial for player-terrain interaction. Stores chunk heightmaps.
   - `net/`: Client-side networking.
     - `WebSocketClient.ts`: Manages WebSocket connection.
     - `types.ts`: Defines network-related types (e.g., `ClientCommand`, connection states). Note: distinct from `src/ecs/types.ts`.
     - `InputHandler.ts`: Previously captured all input. Now, its role in direct player movement/look control is superseded by ECS systems (`inputLookSystem`, `PlayerMovementSystem`). May still be used for other non-ECS inputs or could be refactored/removed if all input becomes ECS-driven.
     - `NetworkManager.ts`: Coordinates client-side networking. Constructor now accepts ECS `world` and `playerEntityId`. `setupMessageHandler` updates the player entity's `Transform` based on server `stateUpdate` messages. Client-side prediction for camera/player movement via direct manipulation has been removed in favor of ECS updates.
   - `server/`: Server-side logic (largely unchanged by recent client refactor).
     - `matchServer.ts`: Main server application.
     - `physics.ts`: Rapier3D physics wrapper.
     - `types.ts`: Server-side data structures. Note: distinct from client-side `types.ts` files.
   - `scenes/`: Exists but is currently empty.
   - `main.ts`: Legacy entry point, likely from project scaffolding phase.
   - (Still Missing from `src/` but in spec): `render/`, `utils/`.

3. Key Game Mechanics & Systems Status

   - ECS & Scene Graph: `bitecs` for ECS, Three.js for rendering. `transformSystem` links ECS position to Three.js object positions. Player entity has `Transform` and `CameraTarget`.
   - Camera Control:
     - `CameraSystem.ts` creates and owns the main `THREE.PerspectiveCamera` and its pivot. It now implements basic FPS camera logic (C4), updating the camera based on the player entity's `Transform` and `CameraTarget` (yaw/pitch).
     - `inputLookSystem.ts` updates `CameraTarget.yaw` and `CameraTarget.pitch` from mouse input for FPS mode.
     - `PlayerMovementSystem.ts` uses `CameraTarget.yaw` to determine movement direction.
     - Direct camera manipulation in `main.tsx` and `NetworkManager.ts` has been removed.
     - TPS camera mode, lerping, and camera collision/occlusion are pending (C5-C7).
   - Player Movement:
     - `PlayerMovementSystem.ts` handles keyboard input for movement (WASD, Space, Shift) and flying/ground mode toggle (F).
     - Calculates movement based on player speed constants, `CameraTarget.yaw`, and delta time.
     - Ground mode includes gravity and jump logic, using `ChunkManager.getHeightAtPosition` for terrain collision.
   - Terrain Generation & Chunk Management: Largely unchanged. `ChunkManager.getHeightAtPosition` now critical for player physics.
   - Networking:
     - `NetworkManager` updated to integrate with ECS for applying server state to the player entity's `Transform`.
     - Old client-side prediction via direct camera manipulation in `NetworkManager` is removed.
   - (Other items like Meshing, Rendering details, Server-side Physics, etc., remain largely as before unless specified above).

4. Notable Discrepancies from Spec / TODOs:

   - (Items like FlatBuffers, Greedy Meshing, Texture Atlas, Advanced State Sync, Server Game Logic, Missing Directories remain relevant TODOs from previous state).
   - Camera System Implementation (Refactor Tasks C5-C7):
     - C5: Implement basic Third-Person (TPS) camera logic. This includes:
       - `CameraSystem.ts`: Update for TPS mode using `CameraTarget.zoom`, `pitch`, `yaw`.
       - `InputLookSystem.ts`: Handle mouse input (X, Y, Wheel) for TPS yaw, pitch, and zoom control.
       - `main.tsx` (or similar): Implement a key to toggle between FPS and TPS modes.
     - C6: Implement smooth camera movement (lerping) for both FPS and TPS modes in `CameraSystem.ts`.
     - C7: Implement basic camera collision detection and occlusion handling in `CameraSystem.ts` (e.g., prevent camera from clipping through walls, zoom in if occluded).
   - Player Input Handling: `InputHandler.ts` in `src/net/` might need review. Its original purpose of collecting all inputs (including movement/look) is now handled by `PlayerMovementSystem` and `InputLookSystem`. Determine if it's still needed for other commands or should be phased out/refactored for a unified ECS-based input approach.

5. Key Issues & Recommendations (Priority Order)

   1. Player Spawning Underground & Movement Issues (RESOLVED):
      - Issue: Player was spawning underground and camera was static.
      - Resolution: `CameraSystem.ts` now correctly updates the camera based on player `Transform` and `CameraTarget` for FPS mode. `PlayerMovementSystem.ts` correctly handles keyboard input and applies movement. Initial spawn height and flying mode allow player to start correctly.

   2. Camera System Refinements (C5-C7 - Next Steps - see section 4 for details).
   3. Server-Side Game Logic Implementation (Core Gameplay Blocker - As before).
   4. Greedy Meshing Implementation (Performance & Spec Adherence - As before).
   5. FlatBuffers for Network Communication (Performance & Spec Adherence - As before).

(Timestamp and versioning for this document to be maintained going forward) 