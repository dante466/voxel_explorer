Voxel Explorer Project Overview for LLMs (Last Updated: {TODAY'S_DATE} - AI Assisted Review)

This document provides a detailed breakdown of the Voxel Explorer game project, based on its codebase, technical specification, and current implementation status.

0. Vision & Scope
A hyper-performant, desktop-web voxel game with procedurally generated terrain. The authoritative server simulates physics (target 30 Hz), and the client targets 60 FPS. MVP focuses on exploration, mining, and building. Future scope includes multiplayer (up to 10 players), resources, and combat.

1. Core Technologies
   - Rendering: Three.js (WebGL2) using `vite` for bundling.
   - Physics: Server-side authoritative with Rapier3D (WASM). Client-side movement prediction and reconciliation.
   - Networking: Raw WebSockets (Client: native `WebSocket`, Server: `'ws'` library). JSON for messages (FlatBuffers planned).
   - Language: TypeScript.
   - ECS: `'bitecs'` library for client-side entity and component management.
   - World Generation: Web Workers for noise (`fast-simplex-noise`) and meshing.

2. Project Structure (`src/`)

   - `main.tsx`: Main client-side entry point. Initializes Three.js scene, ECS world, systems, game loop, core managers (`ChunkManager`, `NetworkManager`, `NoiseManager`, `MesherManager`), debug UI, and global event listeners (keyboard, mouse for interactions).
   - `ecs/`: Entity Component System (client-side).
     - `world.ts`: Defines `bitecs` world factory (`createECSWorld`) and the core `Transform` component (position, rotation, scale).
     - `types.ts`: Contains shared ECS types (e.g., `CameraMode`).
     - `components/`:
       - `CameraTarget.ts`: Defines the `CameraTarget` component (mode, zoom, pitch, yaw) for entities the camera should follow or be controlled by.
     - `systems/`:
       - `transformSystem.ts`: Syncs ECS `Transform` (position, rotation) to Three.js `Object3D` properties. Manages a map (`object3DMap`) of entity IDs to `Object3D` instances.
       - `CameraSystem.ts`: Manages the main `THREE.PerspectiveCamera` and its pivot `Object3D`. Updates camera based on `CameraTarget` of the player entity. Implements FPS and basic TPS camera logic.
       - `inputLookSystem.ts`: Listens for `mousemove` (when pointer locked) and updates `CameraTarget.yaw` and `CameraTarget.pitch` for the player entity.
       - `PlayerMovementSystem.ts`: Handles keyboard inputs (WASD, Space, Shift, Arrows, F for fly toggle). Updates the player entity's `Transform.position` based on inputs, `CameraTarget.yaw`, and delta time. Implements ground mode (gravity, jump using `ChunkManager.getHeightAtPosition`) and flying mode.
   - `world/`: Client-side voxel world logic.
     - `Chunk.ts`: Defines `CHUNK_SIZE`, `LOD_CHUNK_SIZE`, `LODLevel`. `Chunk` class stores voxel data (`Uint8Array`), manages LOD-specific dimensions, and provides heightmap access. (RLE compression mentioned in old overview, current status needs verification in code).
     - `noiseWorker.ts`: Web Worker using `fast-simplex-noise` for deterministic procedural terrain generation based on chunk coordinates and LOD level. Outputs voxel data and heightmap.
     - `NoiseManager.ts`: Manages `noiseWorker.ts` for asynchronous chunk data generation.
     - `mesherWorker.ts`: Web Worker for generating chunk meshes (simple block-by-block, face culling). (Greedy meshing is a TODO).
     - `MesherManager.ts`: Manages `mesherWorker.ts` for asynchronous mesh generation.
     - `ChunkManager.ts`: Orchestrates client-side chunk loading/unloading, LOD switching based on distance and hysteresis, and meshing. Manages `Chunk` data and `THREE.Mesh` instances. Provides `getHeightAtPosition` for player-terrain interaction and `setBlock` for client-side prediction of block changes.
   - `net/`: Client-side networking.
     - `WebSocketClient.ts`: Manages the WebSocket connection, sending commands (currently JSON, FlatBuffers planned) and receiving messages from the server.
     - `types.ts`: Defines client-side network-related types (e.g., `ClientCommand`, `ClientCommandType`, connection states).
     - `InputHandler.ts`: Captures mouse delta for look controls. Its broader role for other inputs seems to be superseded by ECS systems.
     - `NetworkManager.ts`: Coordinates client-side networking.
       - Constructor takes ECS `world`, `playerEntityId`, `movementSystemControls` (for current input state), and `chunkManager` (for prediction and block updates).
       - `setupMessageHandler`: Handles server messages:
         - `stateUpdate`: Updates player entity's `Transform` (position, rotation) to server state. Implements client-side prediction reconciliation by removing acknowledged inputs from `pendingInputs` and replaying subsequent inputs using `calculatePlayerMovement`.
         - `blockUpdate`: Updates chunk data via `ChunkManager.setBlock` based on server-confirmed block changes.
         - `mineError`/`placeError`: Logs errors from server.
       - `sendMineCommand`/`sendPlaceCommand`: Sends block modification requests to the server.
       - `startCommandLoop`: Periodically sends `PLAYER_INPUT` commands to the server (30 Hz) containing current key states, mouse deltas, and camera yaw. Stores these inputs in `pendingInputs` for reconciliation.
   - `server/`: Server-side logic.
     - `matchServer.ts`: Main server application using Express and `ws` for WebSockets.
       - Initializes Rapier physics (`createPhysicsWorld`).
       - Manages `MatchState` (players, chunks).
       - Handles client connections, assigns player IDs.
       - `handleMessage`: Processes client commands:
         - `PLAYER_INPUT`: Updates `lastProcessedInputSeq` for the player. (Full physics-based movement update is a TODO).
         - `MINE_BLOCK`/`PLACE_BLOCK`: Validates commands (bounds, basic checks), updates server-side chunk data (`getBlock`/`setBlock` helpers), and broadcasts `blockUpdate` messages to all clients. Sends `mineError`/`placeError` on failure.
       - Periodically broadcasts game state to clients (TODO: `broadcastState` function seems to be defined but not called in the provided snippet).
     - `physics.ts`: Wrapper for Rapier3D initialization (`initRapier`, `createPhysicsWorld`). (Detailed physics simulation loop and entity management not fully shown in snippet).
     - `types.ts`: Defines server-side data structures (e.g., `MatchState`, `Player`, `Chunk`).
   - `render/`: Client-side rendering utilities.
     - `Highlight.ts`: `VoxelHighlighter` class to render a wireframe box around a targeted voxel using `THREE.LineSegments`. Used in `main.tsx`.
   - `utils/`: Client-side utility functions.
     - `raycastVoxel.ts`: Implements voxel raycasting (DDA algorithm) to convert screen clicks/center screen to voxel coordinates and face normals. Used for block interaction.
   - `scenes/`: Exists but appears empty or unused.
   - `main.ts`: Legacy entry point, likely from scaffolding. `main.tsx` is the current primary entry point.
   - `style.css`: Basic CSS.

3. Key Game Mechanics & Systems Status

   - ECS & Scene Graph: `bitecs` for client-side ECS. Three.js for rendering.
     - Player entity has `Transform`, `CameraTarget`, and `Object3DRef` (links to `playerModelMesh`).
     - `transformSystem` syncs ECS `Transform` to Three.js `Object3D`s.
   - Camera Control (Client):
     - `CameraSystem` updates the main camera based on player's `Transform` and `CameraTarget` (yaw/pitch for FPS, zoom/pitch/yaw for TPS).
     - `inputLookSystem` updates `CameraTarget.yaw` and `CameraTarget.pitch` from mouse input.
     - `PlayerMovementSystem` uses `CameraTarget.yaw` for movement direction.
     - Basic FPS and TPS modes are implemented. Lerping and advanced collision/occlusion are pending (Tech Spec C6-C7).
   - Player Movement (Client & Server):
     - Client: `PlayerMovementSystem` handles keyboard input, calculates intended movement (including gravity/jump in ground mode using `ChunkManager.getHeightAtPosition`), and updates local `Transform`. Flying mode implemented.
     - Client: `NetworkManager` sends input commands, performs client-side prediction by replaying inputs after receiving server state, and snaps to server state.
     - Server: `matchServer.ts` receives inputs. Basic position updates based on input are present; full server-side physics simulation with Rapier for player movement is a major TODO.
   - Terrain Generation & Chunk Management (Client):
     - `ChunkManager` loads/unloads chunks and manages LODs (HIGH/LOW) based on distance to player.
     - `NoiseManager` + `noiseWorker` generate chunk voxel data procedurally.
     - `MesherManager` + `mesherWorker` generate simple block-by-block meshes. Greedy meshing is a TODO.
     - `ChunkManager.getHeightAtPosition` is used for ground collision by `PlayerMovementSystem`.
   - Networking (Client/Server):
     - `NetworkManager` (client) communicates with `matchServer.ts` (server) via WebSockets using JSON messages.
     - Client-side prediction and server reconciliation for player movement is implemented.
     - Authoritative server for block mining/placing: client sends command, server validates, updates its state, and broadcasts to all clients.
     - FlatBuffers for network messages is a TODO.
   - Block Interaction (Mining/Placing):
     - Client: `raycastVoxel` determines target block. `VoxelHighlighter` shows selection.
     - Client: `main.tsx` handles mouse clicks to initiate mine/place actions, calling `NetworkManager.sendMineCommand` or `sendPlaceCommand`.
     - Client: `ChunkManager.setBlock` is used for optimistic local updates on block placement (though server is authoritative).
     - Server: `matchServer.ts` validates and executes block changes, then broadcasts.
   - Server-Side Physics:
     - Rapier3D is initialized on the server (`physics.ts`, `matchServer.ts`).
     - TODO: Full integration of Rapier for authoritative player movement, collision detection, and other physics-driven interactions.

4. Notable Discrepancies from Tech Spec / TODOs (Prioritized):

   1.  **Server-Side Physics & Player Movement (High Priority):**
       -   Tech Spec: Authoritative server simulates physics at 30 Hz.
       -   Current: `matchServer.ts` has basic input handling but lacks full Rapier physics integration for player movement, collision, and state updates. `PlayerMovementSystem.ts` on client is more advanced.
       -   Recommendation: Implement server-side player entity management, apply inputs to physics bodies, step Rapier world, and broadcast authoritative states.

   2.  **Networking - FlatBuffers & Optimization (Initial Bootstrap S0-1 COMPLETE, Integration Pending):**
       -   Tech Spec: FlatBuffers for binary data, chunk diff LZ4 (post-MVP).
       -   Current: JSON messaging for primary communication.
       -   **S0-1 Milestone (FlatBuffers Bootstrap) - COMPLETE:**
           -   A FlatBuffers schema (`src/schema/game.fbs`) defining `Vec3`, `PlayerState`, and `StateSnapshot` (root type) has been created.
           -   TypeScript bindings were generated using `flatc` (compiler version `flatc version 23.5.26`) with the `--ts` and `--gen-object-api` flags.
           -   Helper functions (`encodeStateSnapshot`, `decodeStateSnapshot` using the Object API) and corresponding Jest/Vitest tests (`src/net/flat.test.ts`) have been implemented and are passing.
           -   **Timestamp (`Int64`/`BigInt`) Issue Resolution:** An initial issue where `timestamp` fields were decoded as `0n` was resolved by:
               1.  Ensuring the `flatbuffers` runtime dependency in `package.json` was `^23.5.26`.
               2.  Regenerating schema code with the `--gen-object-api` flag.
               3.  Utilizing the Object API pattern for encoding and decoding, which correctly handles `BigInt` for `Int64` types.
       -   Recommendation: Integrate the created FlatBuffers (de)serialization helpers into the main client-server communication path (`WebSocketClient.ts` and `matchServer.ts`) to replace JSON for state updates and relevant commands.

   3.  **Meshing - Greedy Meshing (Medium Priority):**
       -   Tech Spec: Greedy mesher worker (SURF algorithm).
       -   Current: `mesherWorker.ts` uses a simple block-by-block approach.
       -   Recommendation: Implement greedy meshing to significantly reduce vertex count and improve rendering performance.

   4.  **Chunk Management & Rendering (Medium Priority):**
       -   Tech Spec: Texture Atlas & Renderer, frustum culling, LOD swap refinement.
       -   Current: Basic chunk rendering with shared material. `ChunkManager` has LOD logic. Frustum culling in `ChunkManager.getVisibleChunks` is basic. Texture atlas not explicitly seen.
       -   Recommendation: Implement texture atlas for varied block types. Improve chunk rendering and culling. Refine LOD transitions.

   5.  **Camera System Refinements (Medium Priority - Tech Spec C5-C7):**
       -   C5 (TPS): Basic TPS is in `CameraSystem.ts`. `InputLookSystem` needs TPS mouse handling (zoom). `main.tsx` needs FPS/TPS toggle key.
       -   C6 (Lerping): Smooth camera movement for FPS/TPS is pending.
       -   C7 (Collision/Occlusion): Camera collision and occlusion handling is pending.
       -   Recommendation: Implement these refinements in `CameraSystem.ts` and `InputLookSystem.ts`.

   6.  **Lobby Lifecycle & Match Management (Medium Priority - Tech Spec M5):**
       -   Tech Spec: Lobby registry, /create endpoint, WebSocket handshake with lobby ID, heartbeats, reconnect logic, auto-terminate empty lobby.
       -   Current: `matchServer.ts` is a single match instance. No lobby system or multi-match management. Basic player connect/disconnect.
       -   Recommendation: Implement the lobby system as per M5 tasks.

   7.  **Player Input Handling - `InputHandler.ts` Review (Low-Medium Priority):**
       -   Current: `InputHandler.ts` role seems reduced. `PlayerMovementSystem` and `InputLookSystem` handle primary game inputs.
       -   Recommendation: Review `InputHandler.ts`. Consolidate input logic into ECS systems if possible, or clarify its specific remaining responsibilities (e.g., UI interactions not tied to ECS).

   8.  **World Persistence & Data (Low Priority for MVP):**
       -   Tech Spec: "Persistence / $: None" for MVP.
       -   Current: No persistence. Server `matchState` is in-memory.
       -   Recommendation: This is fine for MVP.

   9.  **Missing Directories from Spec (Low Priority):**
       -   `src/render/` is partially present (`Highlight.ts`). More components like shaders, chunk renderer, atlas management are expected per spec.
       -   `src/utils/` is present (`raycastVoxel.ts`).
       -   Recommendation: Organize rendering code into `src/render/` as it develops.

   10. **RLE Compression for Chunks (Low Priority):**
        -  `Chunk.ts` mentions RLE in old overview, but current implementation detail for compression/decompression needs verification if it exists or is used.
        - Tech Spec mentions chunk diff optionally LZ4 (post-MVP).
        - Recommendation: Confirm if RLE is actively used for chunk data. Consider LZ4 for diffs later.

5. Key Issues & Recommendations (Overall Priority Order - Combining above with general observations):

   1.  **Server-Side Authoritative Player Movement & Physics (CRITICAL):** The largest gap for core gameplay. Implement full Rapier physics on the server for player movement, collisions, and state updates. (Corresponds to #1 in TODOs)
   2.  **Networking Enhancements - FlatBuffers Integration (HIGH):** Essential for performance and scalability as per tech spec. Integrate the S0-1 FlatBuffers bootstrap into the live communication pipeline. (Corresponds to #2 in TODOs)
   3.  **Greedy Meshing (HIGH):** Critical for client rendering performance with larger views or more complex chunks. (Corresponds to #3 in TODOs)
   4.  **Lobby & Match Management (MEDIUM-HIGH):** Required for multiplayer matches as envisioned in tech spec. (Corresponds to #6 in TODOs)
   5.  **Camera System Refinements (MEDIUM):** Polish player experience (TPS controls, lerping, collision). (Corresponds to #5 in TODOs)
   6.  **Chunk Rendering & Texture Atlas (MEDIUM):** Improve visual fidelity and performance. (Corresponds to #4 in TODOs)
   7.  **Server Stability & State Broadcasting (MEDIUM):** Ensure `broadcastState` is robustly implemented and called in `matchServer.ts`. Solidify error handling and resource management on the server.
   8.  **Code Cleanup & Refinement (ONGOING):**
       - Review `InputHandler.ts` role.
       - Ensure consistency in client/server constants (chunk sizes, etc.).
       - Address any remaining client-side prediction inaccuracies, especially around `yVelocity` in `NetworkManager.ts` reconciliation. The comment "This is a known simplification for now" regarding yVelocity implies it's an area for improvement.

(This document should be regularly updated as the project evolves. Timestamp and versioning are recommended.) 

**MILESTONE S1: SERVER-SIDE WORLD & CHUNK MANAGEMENT**

*   **S1-1: Server ECS Bootstrap & Heightmap Consistency Test - COMPLETE**
    *   **Server ECS (`src/server/ecs/world.ts`):**
        *   Created `createServerECSWorld` factory using `bitecs`.
        *   Defined components: `Position`, `Rotation`, `Velocity`, `NetworkId`. (PhysicsBodyId, PlayerInput were also defined but might be pending full server-side physics integration).
        *   Integrated into `matchServer.ts`: ECS world initialized, entities created/removed on player connect/disconnect.
    *   **Heightmap Consistency Test (`src/server/world/chunkValidation.ts`, `matchServer.ts`):**
        *   Implemented `testS1_1_HeightmapConsistency` to compare server-generated chunk heightmaps (from `genChunk.ts`) against a replication of client logic.
        *   **Initial Failures & Debugging:**
            1.  Server's `genChunk.ts` initially produced flat heightmaps.
            2.  Refactored `genChunk.ts` and `src/server/world/heightAt.ts` to use new shared noise constants (`src/shared/terrainConsts.ts`) and a specific multi-octave noise formula (`makeNoise2D` with `mulberry32` PRNG for deterministic seeding).
            3.  Aligned `replicateClientHeightmapGen` in `chunkValidation.ts` with this new "mommy engineer" terrain specification.
        *   **Outcome:** Test now PASSES, confirming server can generate chunk (0,0) with a heightmap identical to the client's updated specification.

*   **S1-2: Pre-warm Initial Chunks (Server) - COMPLETE (but temporarily disabled for S1-3 testing)**
    *   Implemented in `matchServer.ts` to generate a 3x3 chunk area around (0,0) on server startup using `genChunk`.
    *   Logs timing and success. (Currently commented out to facilitate S1-3 on-demand loading tests).

*   **S1-3: On-Demand Chunk Loader (Server Logic & Client Integration) - COMPLETE**
    *   **Server-Side Logic (Previously Implemented):**
        *   `src/server/world/getOrCreateChunk.ts`: Contains `getOrCreateChunk(state, seed, cx, cz)` which calls `genChunk` if a chunk is missing and caches it in `matchState.chunks`.
        *   `src/server/world/voxelIO.ts`: `getBlock` and `setBlock` were updated to use `getOrCreateChunk`, making block modifications trigger on-demand generation.
        *   `src/server/matchServer.ts`: Implemented a `chunkRequest` message handler that uses `getOrCreateChunk` to fetch/generate chunk data and sends it back to the client in a `chunkResponse` message (voxel data as `Array.from(chunk.data)`).
    *   **Client-Side Integration (`src/world/ChunkManager.ts`, `src/net/NetworkManager.ts`, `src/net/WebSocketClient.ts`):**
        *   **Goal:** Client requests chunk data from the server for rendering new areas, instead of relying solely on its local `NoiseManager` for generation.
        *   **`ChunkManager.ts` Modifications:**
            *   Constructor now accepts a `WebSocket | null` instance (passed as `null` from `main.tsx` initially).
            *   Added `public setSocket(socket: WebSocket)` method, allowing `NetworkManager` to provide the live socket post-connection.
            *   `loadChunk()` method now calls a new private method `requestChunkDataFromServer(cx, cz, lodLevel)`.
            *   `requestChunkDataFromServer()`:
                *   Sends a `chunkRequest` JSON message (e.g., `{ type: 'chunkRequest', cx, cz }`) to the server via the WebSocket.
                *   Manages pending requests using a `Map` (`pendingChunkRequests`) storing Promises, to avoid redundant requests and handle server responses.
                *   Includes a 10-second timeout for server responses. On timeout (or if WebSocket is initially unavailable), it falls back to local generation using `this.noiseManager.generateChunk()`.
            *   Added `public handleChunkResponse(cx, cz, voxels)`:
                *   Called by `NetworkManager` when a `chunkResponse` message is received from the server.
                *   Creates a new `Chunk` object.
                *   Populates the chunk's voxel data using `chunk.setData(new Uint8Array(voxels))`.
                *   Resolves the corresponding Promise in `pendingChunkRequests`.
            *   Added `public handleChunkResponseError(cx, cz, reason)`:
                *   Called by `NetworkManager` for `chunkResponseError` messages.
                *   Rejects the corresponding Promise.
        *   **`NetworkManager.ts` Modifications:**
            *   Constructor updated to pass an `onOpenCallback` to `WebSocketClient`.
            *   This `onOpenCallback` is: `(socket) => { if (this.chunkManager) { this.chunkManager.setSocket(socket); } }`.
            *   The main `wsClient.onMessage` handler in `NetworkManager` now checks for message types `chunkResponse` and `chunkResponseError`. If detected, it calls `this.chunkManager.handleChunkResponse(...)` or `this.chunkManager.handleChunkResponseError(...)` respectively.
        *   **`WebSocketClient.ts` Modifications:**
            *   Constructor now accepts an optional `onOpenCallback: (socket: WebSocket) => void`.
            *   In its internal `this.ws.onopen` handler, if this callback is provided, it's called with the active `WebSocket` instance.
    *   **Verification:**
        *   Server logs confirm receipt of `chunkRequest` from client, generation/caching by `getOrCreateChunk`, and sending of `chunkResponse`.
        *   Client logs confirm sending of `chunkRequest`, receipt and processing of `chunkResponse` from server, and subsequent loading/meshing of the chunk using server-provided data.
        *   Fallback to local generation on timeout/no-socket was also included in the `ChunkManager` logic.
        *   This makes chunk loading for viewing server-authoritative, fulfilling S1-3. 