// Voxel Explorer Game Schema

namespace GameSchema;

// Basic 3D vector for position and rotation
table Vec3 {
  x:float;
  y:float;
  z:float;
}

// Represents the state of a single player
table PlayerState {
  id:string (key); // Player's unique identifier
  position:Vec3;   // Player's current position
  rotation:Vec3;   // Player's current rotation (can be Euler angles or quaternion components based on client use)
  lastProcessedInputSeq:int; // Last input sequence number processed by the server for this player
}

// Represents a snapshot of the game state, primarily player states
// This will be the root type for network messages containing full state updates.
table StateSnapshot {
  players:[PlayerState]; // A list of all players currently in the game
  timestamp:long;        // Server timestamp when this snapshot was generated
}

// Optionally, you might want a root type for messages if you send different kinds of root tables
// For now, we can assume StateSnapshot is often a root, or specific command types.
// Let's define StateSnapshot as a root type for this example.
root_type StateSnapshot; 