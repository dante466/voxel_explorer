// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Vec3, Vec3T } from '../game-schema/vec3.js';


export class PlayerState implements flatbuffers.IUnpackableObject<PlayerStateT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PlayerState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlayerState(bb:flatbuffers.ByteBuffer, obj?:PlayerState):PlayerState {
  return (obj || new PlayerState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlayerState(bb:flatbuffers.ByteBuffer, obj?:PlayerState):PlayerState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

position(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vec3()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

rotation(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vec3()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

lastProcessedInputSeq():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startPlayerState(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, positionOffset, 0);
}

static addRotation(builder:flatbuffers.Builder, rotationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, rotationOffset, 0);
}

static addLastProcessedInputSeq(builder:flatbuffers.Builder, lastProcessedInputSeq:number) {
  builder.addFieldInt32(3, lastProcessedInputSeq, 0);
}

static endPlayerState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // id
  return offset;
}


unpack(): PlayerStateT {
  return new PlayerStateT(
    this.id(),
    (this.position() !== null ? this.position()!.unpack() : null),
    (this.rotation() !== null ? this.rotation()!.unpack() : null),
    this.lastProcessedInputSeq()
  );
}


unpackTo(_o: PlayerStateT): void {
  _o.id = this.id();
  _o.position = (this.position() !== null ? this.position()!.unpack() : null);
  _o.rotation = (this.rotation() !== null ? this.rotation()!.unpack() : null);
  _o.lastProcessedInputSeq = this.lastProcessedInputSeq();
}
}

export class PlayerStateT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public position: Vec3T|null = null,
  public rotation: Vec3T|null = null,
  public lastProcessedInputSeq: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const position = (this.position !== null ? this.position!.pack(builder) : 0);
  const rotation = (this.rotation !== null ? this.rotation!.pack(builder) : 0);

  PlayerState.startPlayerState(builder);
  PlayerState.addId(builder, id);
  PlayerState.addPosition(builder, position);
  PlayerState.addRotation(builder, rotation);
  PlayerState.addLastProcessedInputSeq(builder, this.lastProcessedInputSeq);

  return PlayerState.endPlayerState(builder);
}
}
