// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { PlayerState, PlayerStateT } from '../game-schema/player-state.js';


export class StateSnapshot implements flatbuffers.IUnpackableObject<StateSnapshotT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StateSnapshot {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStateSnapshot(bb:flatbuffers.ByteBuffer, obj?:StateSnapshot):StateSnapshot {
  return (obj || new StateSnapshot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStateSnapshot(bb:flatbuffers.ByteBuffer, obj?:StateSnapshot):StateSnapshot {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StateSnapshot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

players(index: number, obj?:PlayerState):PlayerState|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new PlayerState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

playersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

timestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startStateSnapshot(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPlayers(builder:flatbuffers.Builder, playersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playersOffset, 0);
}

static createPlayersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPlayersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:bigint) {
  builder.addFieldInt64(1, timestamp, BigInt('0'));
}

static endStateSnapshot(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishStateSnapshotBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedStateSnapshotBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createStateSnapshot(builder:flatbuffers.Builder, playersOffset:flatbuffers.Offset, timestamp:bigint):flatbuffers.Offset {
  StateSnapshot.startStateSnapshot(builder);
  StateSnapshot.addPlayers(builder, playersOffset);
  StateSnapshot.addTimestamp(builder, timestamp);
  return StateSnapshot.endStateSnapshot(builder);
}

unpack(): StateSnapshotT {
  return new StateSnapshotT(
    this.bb!.createObjList<PlayerState, PlayerStateT>(this.players.bind(this), this.playersLength()),
    this.timestamp()
  );
}


unpackTo(_o: StateSnapshotT): void {
  _o.players = this.bb!.createObjList<PlayerState, PlayerStateT>(this.players.bind(this), this.playersLength());
  _o.timestamp = this.timestamp();
}
}

export class StateSnapshotT implements flatbuffers.IGeneratedObject {
constructor(
  public players: (PlayerStateT)[] = [],
  public timestamp: bigint = BigInt('0')
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const players = StateSnapshot.createPlayersVector(builder, builder.createObjectOffsetList(this.players));

  return StateSnapshot.createStateSnapshot(builder,
    players,
    this.timestamp
  );
}
}
